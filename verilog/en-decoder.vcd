$date
	Tue Nov  7 14:32:58 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! serialOut $end
$var wire 8 " parallelOut [7:0] $end
$var reg 1 # clock $end
$var reg 8 $ parallelIn [7:0] $end
$scope module tester $end
$var wire 1 # clock $end
$var wire 8 % parallelIn [7:0] $end
$var wire 1 & load $end
$var reg 1 ! serialOut $end
$var reg 8 ' tempparallelIn [7:0] $end
$var integer 32 ( i [31:0] $end
$scope module counter $end
$var wire 1 # clock $end
$var reg 1 & isItEight $end
$var integer 32 ) i [31:0] $end
$upscope $end
$upscope $end
$scope module tester2 $end
$var wire 1 # clock $end
$var wire 1 ! serialIn $end
$var wire 1 * load $end
$var reg 8 + parallelOut [7:0] $end
$var reg 8 , tempparallelOut [7:0] $end
$var integer 32 - i [31:0] $end
$scope module counter $end
$var wire 1 # clock $end
$var reg 1 * isItEight $end
$var integer 32 . i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 .
bx -
b0 ,
bx +
0*
b1 )
bx (
bx '
0&
b1111 %
b1111 $
1#
bx "
x!
$end
#1000
0#
#2000
bx0000000 ,
b1000 -
b10 .
b0xxxxxxx '
b1000 (
b10 )
1#
#3000
0#
#4000
b11 )
b0xxxxxx '
b1000 (
b11 .
bx000000 ,
b1000 -
1#
#5000
0#
#6000
bx00000 ,
b1000 -
b100 .
b0xxxxx '
b1000 (
b100 )
1#
#7000
0#
#8000
b101 )
b0xxxx '
b1000 (
b101 .
bx0000 ,
b1000 -
1#
#9000
0#
#10000
bx000 ,
b1000 -
b110 .
b0xxx '
b1000 (
b110 )
1#
#11000
0#
#12000
b111 )
b0xx '
b1000 (
b111 .
bx00 ,
b1000 -
1#
#13000
0#
#14000
bx00 "
bx00 +
1*
b1000 .
b1111 '
1&
b1000 )
1#
#15000
0#
#16000
0&
b0 )
0*
b0 .
1#
#17000
0#
#18000
b1xxxxxx0 ,
b1000 -
b1 .
b111 '
b1000 (
1!
b1 )
1#
#19000
0#
#20000
b10 )
b11 '
b1000 (
b10 .
b11xxxxxx ,
b1000 -
1#
#21000
0#
#22000
b111xxxxx ,
b1000 -
b11 .
b1 '
b1000 (
b11 )
1#
#23000
0#
#24000
b100 )
b0 '
b1000 (
b100 .
b1111xxxx ,
b1000 -
1#
#25000
0#
#26000
b1111xxx ,
b1000 -
b101 .
b1000 (
0!
b101 )
1#
#27000
0#
#28000
b110 )
b1000 (
b110 .
b1111xx ,
b1000 -
1#
#29000
0#
#30000
b1111x ,
b1000 -
b111 .
b1000 (
b111 )
1#
#31000
0#
#32000
b1111 "
b1111 +
1&
b1000 )
b1000 (
1*
b1000 .
b1111 ,
b1000 -
1#
#33000
0#
#34000
b111 ,
b1000 -
0*
b0 .
b1000 (
0&
b0 )
1#
#35000
0#
#36000
b1 )
b1000 (
b1 .
b11 ,
b1000 -
1#
#37000
0#
#38000
b1 ,
b1000 -
b10 .
b1000 (
b10 )
1#
#39000
0#
#40000
b11 )
b1000 (
b11 .
b0 ,
b1000 -
1#
#41000
0#
#42000
b1000 -
b100 .
b1000 (
b100 )
1#
#43000
0#
#44000
b101 )
b1000 (
b101 .
b1000 -
1#
#45000
0#
#46000
b1000 -
b110 .
b1000 (
b110 )
1#
#47000
0#
#48000
b111 )
b1000 (
b111 .
b1000 -
1#
#49000
0#
#50000
b0 "
b0 +
1*
b1000 .
b1111 '
1&
b1000 )
1#
#51000
0#
#52000
0&
b0 )
0*
b0 .
1#
#53000
0#
#54000
b10000000 ,
b1000 -
b1 .
b111 '
b1000 (
1!
b1 )
1#
#55000
0#
#56000
b10 )
b11 '
b1000 (
b10 .
b11000000 ,
b1000 -
1#
#57000
0#
#58000
b11100000 ,
b1000 -
b11 .
b1 '
b1000 (
b11 )
1#
#59000
0#
#60000
b100 )
b0 '
b1000 (
b100 .
b11110000 ,
b1000 -
1#
#61000
0#
#62000
b1111000 ,
b1000 -
b101 .
b1000 (
0!
b101 )
1#
#63000
0#
#64000
b110 )
b1000 (
b110 .
b111100 ,
b1000 -
1#
#65000
0#
#66000
b11110 ,
b1000 -
b111 .
b1000 (
b111 )
1#
#67000
0#
#68000
b1111 "
b1111 +
1&
b1000 )
b1000 (
1*
b1000 .
b1111 ,
b1000 -
1#
#69000
0#
#70000
b111 ,
b1000 -
0*
b0 .
b1000 (
0&
b0 )
1#
#71000
0#
#72000
b1 )
b1000 (
b1 .
b11 ,
b1000 -
1#
#73000
0#
#74000
b1 ,
b1000 -
b10 .
b1000 (
b10 )
1#
#75000
0#
#76000
b11 )
b1000 (
b11 .
b0 ,
b1000 -
1#
#77000
0#
#78000
b1000 -
b100 .
b1000 (
b100 )
1#
#79000
0#
#80000
b101 )
b1000 (
b101 .
b1000 -
1#
#81000
0#
#82000
b1000 -
b110 .
b1000 (
b110 )
1#
#83000
0#
#84000
b111 )
b1000 (
b111 .
b1000 -
1#
#85000
0#
#86000
b0 "
b0 +
1*
b1000 .
b1111 '
1&
b1000 )
1#
#87000
0#
#88000
0&
b0 )
0*
b0 .
1#
#89000
0#
#90000
b10000000 ,
b1000 -
b1 .
b111 '
b1000 (
1!
b1 )
1#
#91000
0#
#92000
b10 )
b11 '
b1000 (
b10 .
b11000000 ,
b1000 -
1#
#93000
0#
#94000
b11100000 ,
b1000 -
b11 .
b1 '
b1000 (
b11 )
1#
#95000
0#
#96000
b100 )
b0 '
b1000 (
b100 .
b11110000 ,
b1000 -
1#
#97000
0#
#98000
b1111000 ,
b1000 -
b101 .
b1000 (
0!
b101 )
1#
#99000
0#
#100000
b110 )
b1000 (
b110 .
b111100 ,
b1000 -
1#
